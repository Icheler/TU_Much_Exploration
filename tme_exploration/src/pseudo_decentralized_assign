#!/usr/bin/env python3

from cmath import inf
import numpy as np
import rospy
import re
import actionlib
import tf
import os
import copy

from skimage import graph
from scipy.optimize import linear_sum_assignment
from datetime import datetime

from tme_exploration.msg import frontierArray
from geometry_msgs.msg import Point
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from sensor_msgs.msg import LaserScan
from visualization_msgs.msg import Marker
from actionlib_msgs.msg import GoalStatusArray
from nav_msgs.msg import OccupancyGrid


class FrontierAssign:
    """
    This class provides all the needed utility to gather frontier and
    robot_position data and distribute each robot that runs the associated
    __main__ to the best possible frontier given certain parameters.
    """

    def __init__(self):
        self.date_string = datetime.now().strftime("%Y-%m-%d|%H:%M:%S")
        self.frontiers = []
        self.distances = []
        self.number_robots = rospy.get_param("~number_of_robots")
        self.robot_prefix = rospy.get_param("~robot_ns")
        self.robot_position = np.empty(self.number_robots, dtype=Point)
        self.robot_speeds = np.empty(self.number_robots)
        self.max_speed = None
        self.var_speed_modifier = np.empty(self.number_robots)
        self.visibility_modifier = np.empty(self.number_robots)
        self.assign_robot_speed()
        self.speed_modifier()
        self.visibility_params()
        self.last_search_time = np.empty(self.number_robots, dtype=rospy.Time)
        self.goals = np.empty(self.number_robots, dtype=Point)
        self.publisher_position = []
        self.robot_marker = Marker()
        self.chosen_method = rospy.get_param("~frontier_method")
        self.sub_status = []
        self.blacklist = []
        self.explored_frontiers = np.empty(self.number_robots)
        self.map_name = os.environ["tme_ROBOT_ENV"]
        self.map = None
        self.clean_area = self.get_clean_area(20)

        for i in range(self.number_robots):
            self.last_search_time[i] = rospy.Time.now() - rospy.Duration(5)
            j = i + 1
            topic = "/" + self.robot_prefix + str(j) + "/point_relay"
            self.publisher_position.append(rospy.Publisher(
                topic, Point, queue_size=10
            ))

            topic = "/" + self.robot_prefix + str(j) + "/move_base/status"
            self.sub_status.append(
                rospy.Subscriber(
                    topic, GoalStatusArray, queue_size=10, callback_args=topic
                )
            )

        self.robot_marker.header.frame_id = "map"
        self.robot_marker.id = 0
        self.robot_marker.type = 2  # sphere
        self.robot_marker.action = 0
        self.robot_marker.pose.orientation.x = 0
        self.robot_marker.pose.orientation.y = 0
        self.robot_marker.pose.orientation.z = 0
        self.robot_marker.pose.orientation.w = 1.0
        self.robot_marker.scale.x = 1.0
        self.robot_marker.scale.y = 1.0
        self.robot_marker.scale.z = 1.0

        self.robot_marker.color.a = 1.0

    def increment_frontiers(self, number):
        """Increment value of assigned frontiers to have a rolling maximum"""
        self.explored_frontiers[number] += 1

    # Callbacks for the frontiers and position data from the ros topics
    def callback_frontiers(self, data):
        """Callback for frontier data to get assigned to self.frontiers"""
        self.frontiers = data

    def callback_status(self, data, topic):
        """Get status for move_base data"""
        number = (int)((re.search(r"\d+", topic)).group(0)) - 1
        status_list = data.status_list

        for i in range(len(status_list)):
            if status_list[i].status == 4:
                np.append(self.blacklist, self.goals[number])

    def callback_map(self, data):
        """Callback for OccupancyGrid map data"""
        self.map = np.asarray(data.data, dtype=np.int8).reshape(
            data.info.height, data.info.width
        )
        self.map_res = data.info.resolution
        self.map_origin = [
            data.info.origin.position.x, data.info.origin.position.y
        ]
        self.map_middle = int(data.info.height / 2)

    def position_call_tf(self):
        """Update position data for each robot to have current estimate"""
        for i in range(self.number_robots):
            j = i + 1
            try:
                tf_topic = f"/robot{j}/map"
                (trans, rot) = listener.lookupTransform(
                    tf_topic, f"/robot{j}/base_link", rospy.Time(0)
                )
                robot_location = Point(x=trans[0], y=trans[1])
                self.robot_position[i] = robot_location
            except (
                tf.LookupException,
                tf.ConnectivityException,
                tf.ExtrapolationException,
            ) as e:
                rospy.logerr(f"TF error for {tf_topic} with message {e}")

        return self.robot_position

    def blacklist_check(self, frontiers):
        """
        Check if any of the current frontiers are on the blacklist and
        remove those from the list of frontiers which gets returned
        """
        foundSth = 0
        local_frontiers = copy.deepcopy(frontiers)
        if len(local_frontiers.frontiers) != 0:
            for i in range(len(local_frontiers.frontiers)):
                foundSth = 0
                for j in range(len(self.blacklist)):
                    x = i - foundSth
                    try:
                        test1 = local_frontiers.frontiers[x].centroid
                    except:
                        break
                    test2 = self.blacklist[j]
                    if test1 == test2:
                        foundSth += 1
                        local_frontiers.frontiers.pop(x)
        return local_frontiers

    def euclid_distance(self, a: Point, b: Point):
        """Get euclidean distance between two points"""
        testa = np.square(a.x - b.x)
        testb = np.square(a.y - b.y)
        testc = testa + testb
        result = np.sqrt(testc)
        return result

    def frontier_distance(self, frontiers, positions, map, estimate="xyz"):
        """
        Instanciate the self.distances matrix with the distance for every robot
        to every frontier
        """
        local_frontiers = frontiers
        l_positions = positions
        r_distances = np.empty((
            len(local_frontiers.frontiers), len(l_positions)
        ))
        if estimate == "euclid":
            for i in range(len(local_frontiers.frontiers)):
                for j in range(len(l_positions)):
                    try:
                        r_distances[i][j] = self.euclid_distance(
                            local_frontiers.frontiers[i].centroid,
                            l_positions[j]
                        )
                    except:
                        r_distances[i][j] = 50
        else:
            r_distances = self.wavefront_robot_to_frontier(
                frontiers, positions, map
            )
            r_distances = np.where(np.isinf(r_distances), 1000, r_distances)

        maximum = 0
        try:
            maximum = np.max(r_distances)
        except:
            pass
        if maximum != 0 and maximum:
            r_distances = r_distances / maximum
        return r_distances

    def assign_robot_speed(self):
        """
        Get speed for every robot from ros parameters and assign max_speed
        """
        for i in range(0, self.number_robots):
            temp_str = "/" + self.robot_prefix + str(i + 1) + "/max_velocity"
            # TODO
            self.robot_speeds[i] = 1  # rospy.get_param(temp_str)
        self.max_speed = np.max(self.robot_speeds)

    def speed_modifier(self):
        """
        Assign speed modifiers for every robot by normalizing the values to 0,1
        through dividing with the max_speed
        """
        self.var_speed_modifier = np.empty(self.number_robots)
        for i in range(self.number_robots):
            self.var_speed_modifier[i] = self.robot_speeds[i] / self.max_speed

    def visibility_params(self):
        """
        Find angle and range of every robot, multiply them and normalize for
        all values
        """
        self.visibility_modifier = np.zeros(self.number_robots)
        for i in range(self.number_robots):
            topic = "/" + self.robot_prefix + str(self.number_robots) + "/scan"
            data = rospy.wait_for_message(topic, LaserScan)
            overall_angle = data.angle_max - data.angle_min
            overall_range = data.range_max - data.range_min
            self.visibility_modifier[i] = overall_angle * overall_range
        maximum = np.max(self.visibility_modifier)
        self.visiblityModifier = self.visibility_modifier / maximum

    def frontier_distance_modifier(self, frontiers, distances):
        """
        Computes the modifier from robot speed and distance between robot and
        frontiers, Normalize again
        """
        result = np.ones((len(frontiers.frontiers), self.number_robots))
        try:
            for i in range(len(frontiers.frontiers)):
                for j in range(self.number_robots):
                    result[i][j] = self.var_speed_modifier[j] * distances[i][j]
            result = result / np.max(result)
        except:
            pass
        return result

    def frontier_visibility_modifier(self, frontiers):
        """
        Computes the modifier from robot visibility and size of frontiers,
        Normalize again
        """
        result = np.ones((len(frontiers.frontiers), self.number_robots))
        try:
            for i in range(len(frontiers.frontiers)):
                for j in range(self.number_robots):
                    result[i][j] = (
                        self.visibility_modifier[j] *
                        frontiers.frontiers[i].size
                    )
            result = result / np.max(result)
            result = 1 - result

        except:
            pass
        return result

    def active_cb(self):
        """Callback if move_base is still active"""
        rospy.loginfo("Goal pose is now being processed by the Action Server")

    def feedback_cb(self, feedback):
        """Callback if feedback for goal is received"""
        rospy.loginfo("Feedback for goal pose received")

    def done_cb(self, status, result):
        """Callback with what status the move_base was exited"""
        rospy.logwarn("move_base exited with status: " + str(status))

        if status == 2:
            rospy.loginfo(
                """Goal pose received a cancel request after it started
                executing, completed execution!"""
            )

        if status == 3:
            rospy.loginfo("Goal pose reached")

        if status == 4:
            rospy.loginfo("Goal pose was aborted by the Action Server")
            return

        if status == 5:
            rospy.loginfo("Goal pose has been rejected by the Action Server")
            return

        if status == 8:
            rospy.loginfo(
                """Goal pose received a cancel request before it 
                started executing, successfully cancelled!"""
            )

    def movebase_client(
        self, topic, number, position, orientation=[0, 0, 0, 1], delete=False
    ):
        """Method to allow the parsing of move_base actions"""

        client = actionlib.SimpleActionClient(topic, MoveBaseAction)

        client.wait_for_server()

        goal = MoveBaseGoal()
        goal.target_pose.header.frame_id = "map"
        goal.target_pose.header.stamp = rospy.Time.now()
        goal.target_pose.pose.position.x = position.x
        goal.target_pose.pose.position.y = position.y
        goal.target_pose.pose.position.z = 0
        goal.target_pose.pose.orientation.x = orientation[0]
        goal.target_pose.pose.orientation.y = orientation[1]
        goal.target_pose.pose.orientation.z = orientation[2]
        goal.target_pose.pose.orientation.w = orientation[3]

        self.last_search_time[number] = rospy.Time.now()

        client.send_goal(goal, self.done_cb, self.active_cb, self.feedback_cb)

    def get_clean_area(self, number):
        """
        Creates array of size: (number * 2 + 1) by (number * 2 + 1)
        """
        size = number * 2 + 1
        result = []
        for i in range(size):
            x = i - number
            for j in range(size):
                y = j - number
                result.append([x, y])
        return result

    def clean_neighbors(self, array, indices, clean_area):
        """
        Returns input array where all areas with size clean_area are cleaned
        """
        result = array
        shapes = result.shape
        for x, y in indices:
            if x < shapes[0] and y < shapes[1] and x > -1 and y > -1:
                result[x][y] = 1
            for dx, dy in clean_area:
                x_test = x + dx
                y_test = y + dy
                if (
                    x_test < shapes[0]
                    and y_test < shapes[1]
                    and x_test > -1
                    and y_test > -1
                ):
                    result[x + dx][y + dy] = 1
        return result

    def point_to_matrix(self, point):
        """
        Convert from Point object to [x,y] matrix
        """
        try:
            if point.size != 0:
                rospy.logwarn(point)
                return point
        except:
            return [point.x, point.y]

    def centroid_to_matrix(self, centroid):
        """
        Convert from Centroid object to [x,y] matrix
        """
        if type(centroid).__module__ == np.__name__:
            rospy.logwarn(centroid)
            return centroid
        else:
            return [centroid.initial.x, centroid.initial.y]

    def point_to_map_matrix(self, point_array):
        """
        Convert from point_array to [x,y] in map coordinates
        """
        result = np.empty_like(point_array, dtype=int)
        result[0] = round((point_array[0] - self.map_origin[0]) / self.map_res)
        result[1] = round((point_array[1] - self.map_origin[1]) / self.map_res)
        return result

    def map_to_point_matrix(self, point_array):
        """
        Convert from point in map coordinates to matrix coordinates
        """
        result = np.empty_like(point_array, dtype=float)
        result[0] = point_array[0] * self.map_res + self.map_origin[0]
        result[1] = point_array[1] * self.map_res + self.map_origin[1]
        return result

    def wavefront_robot_to_frontier(self, frontiers, positions, maps):
        """
        Get distances from frontier positions to robot positions on map array
        """
        robots = copy.deepcopy(positions)
        robot_len = len(robots)
        goals = copy.deepcopy(frontiers.frontiers)
        goals_len = len(goals)
        map = copy.deepcopy(maps)
        map = np.where(map > 99, -1, map)
        map = np.where(map == 0, 1, map)
        for i in range(robot_len):
            temp = self.point_to_matrix(robots[i])
            robots[i] = self.point_to_map_matrix(temp)
        for i in range(goals_len):
            temp = self.centroid_to_matrix(goals[i])
            goals[i] = self.point_to_map_matrix(temp)
        map = self.clean_neighbors(map, robots, self.clean_area)
        map = self.clean_neighbors(map, goals, self.clean_area)
        l_graph = graph.MCP(costs=map, fully_connected=False)
        frontierDistances = np.ones((goals_len, robot_len))
        for i in range(robot_len):
            cost_array, tracebacks_array = l_graph.find_costs(
                [robots[i]], goals, find_all_ends=True
            )
            for j in range(len(goals)):
                temp = goals[j]
                testing = cost_array[temp[0]][temp[1]]
                # if result is inf try to find result in vicinity with
                # non-inf value
                if np.isinf(testing):
                    shapes = cost_array.shape
                    x = temp[0]
                    y = temp[1]
                    for dx, dy in self.clean_area:
                        x_test = x + dx
                        y_test = y + dy
                        if (
                            x_test < shapes[0]
                            and y_test < shapes[1]
                            and x_test > -1
                            and y_test > -1
                        ):
                            if np.isinf(cost_array[x_test][y_test]):
                                testing = cost_array[x_test][y_test]
                                break
                frontierDistances[j][i] = self.var_speed_modifier[i] * testing
        return frontierDistances

    def rank_matrix(self, frontiers, positions, map, estimate="xyz"):
        """minPos approximation by assigning rank based on distance between
        goal and robot locations this is done from frontiers perspective"""
        frontier_distance = self.frontier_distance(
            frontiers, positions, map, estimate
        )
        order = np.argsort(frontier_distance, axis=1)
        ranks = np.argsort(order, axis=1)
        return ranks + 0.00001 * frontier_distance

    def rank_matrix_norm(self, distances, frontiers, positions, map):
        """same as rank_matrix but matrix gets normalized at the end"""
        frontier_distance = distances
        order = np.argsort(frontier_distance, axis=1)
        ranks = np.argsort(order, axis=1)
        maximum = 0
        try:
            maximum = np.max(ranks)
        except:
            pass
        if maximum != 0 and maximum:
            result = ranks / maximum
        else:
            result = ranks
        return result

    def rank_distance(self, frontiers, positions, map):
        """ranks matrix from closest to robot to furthest"""
        frontier_distance = self.frontier_distance(frontiers, positions, map)
        order = np.argsort(frontier_distance, axis=0)
        ranks = np.argsort(order, axis=0)
        maximum = 0
        try:
            maximum = np.max(ranks)
        except:
            pass
        if maximum != 0 and maximum:
            result = ranks / maximum
        else:
            result = ranks
        return result

    def rank_visibility(self, frontiers):
        """Rank all frontiers by how much visible area they have"""
        frontier_vis = self.frontier_visibility_modifier(frontiers)
        order = np.argsort(frontier_vis, axis=0)
        ranks = np.argsort(order, axis=0)
        maximum = 0
        try:
            maximum = np.max(ranks)
        except:
            pass
        if maximum:
            result = ranks / maximum
        else:
            result = ranks
        return result

    def alpha_beta_dist(self, frontiers, positions, map, alpha=7, beta=7):
        """
        Alpha_beta distance according to nextFrontier paper
        Higher Alpha prioritizes closer frontiers
        Higher Beta prioritizes further frontiers
        """
        frontier_distance = self.frontier_distance(frontiers, positions, map)
        temp = np.power(frontier_distance, alpha) * np.power(
            (1 - frontier_distance), beta
        )
        maximum = 0
        try:
            maximum = np.max(temp)
        except:
            pass
        if maximum:
            result = temp / maximum
        else:
            result = temp
        return result

    def robot_spread(self, distances, frontiers, positions, map):
        """
        Get distance of every other robot to every frontier so we know which
        frontiers are furthest away from all other robots without the current
        one
        """
        if not np.any(distances):
            dist = self.frontier_distance(frontiers, positions, map)
            distance_sum = np.sum(dist, axis=0)
        else:
            distance_sum = np.sum(distances, axis=0)
        new_dist = np.reshape(
            distance_sum, (1, self.number_robots)) - distances
        maximum = np.max(new_dist)
        try:
            if maximum != 0:
                result = new_dist
                result = result / maximum
                result = (1 - result)
            else:
                result = new_dist
        except:
            result = new_dist
        return result


if __name__ == "__main__":
    """
    Main method where the node gets declared and pretty much everything happens
    """

    rospy.init_node("frontier_assign")
    abc = 1

    param_rate = rospy.get_param("~frontier_rate", 5)

    relative_name = rospy.get_name()
    robot_number = int(list(filter(str.isdigit, relative_name))[0])

    data = rospy.wait_for_message(
        "tme_frontier_search/frontierArray",
        frontierArray
    )

    fInstance = FrontierAssign()

    listener = tf.TransformListener()

    marker_pub = rospy.Publisher("robot_marker", Marker, queue_size=10)

    # one of: nearest, greedy, combined, minPos
    chosen_method = rospy.get_param("~frontier_method")
    rospy.logwarn("Method is set to find {} goal".format(chosen_method))
    fInstance.chosen_method = chosen_method

    rospy.Subscriber(
        "tme_frontier_search/frontierArray",
        frontierArray,
        fInstance.callback_frontiers
    )

    rospy.Subscriber("/map", OccupancyGrid, fInstance.callback_map)

    chosen_method_id = 0

    if chosen_method == "nearest":
        chosen_method_id = 0
    elif chosen_method == "co131":
        chosen_method_id = 1
    elif chosen_method == "minPos":
        chosen_method_id = 2
    elif chosen_method == "nextFrontier":
        chosen_method_id = 3
        visibility_weighting = rospy.get_param("~visibility_weighting", 1)
        speed_weighting = rospy.get_param("~speed_weighting", 1)
    elif chosen_method == "counterSpread":
        chosen_method_id = 5
    elif chosen_method == "co122":
        chosen_method_id = 6
    elif chosen_method == "combined":
        chosen_method_id = 7
    elif chosen_method == "coEuclid":
        chosen_method_id = 8
    elif chosen_method == "minEuclid":
        chosen_method_id = 9
    else:
        chosen_method_id = 4
        visibility_weighting = rospy.get_param("~visibility_weighting", 1)
        speed_weighting = rospy.get_param("~speed_weighting", 1)

    rate = rospy.Rate(param_rate)
    id = 0

    time_estimate = 0
    time_increment = 2

    while not rospy.is_shutdown():

        cost_matrix = None
        fInstance.position_call_tf()

        if fInstance.frontiers and np.all(fInstance.robot_position) \
                and time_estimate > 20:
            frontiers = copy.deepcopy(fInstance.frontiers)
            frontiers = fInstance.blacklist_check(frontiers)
            if frontiers and len(frontiers.frontiers) != 0:
                positions = copy.deepcopy(fInstance.robot_position)
                map = copy.deepcopy(fInstance.map)
                distances = None
                visibility = None
                distance_method = "xyz"
                num_robots = copy.deepcopy(fInstance.number_robots)

                j = robot_number
                i = j - 1

                if chosen_method_id == 0:
                    distances = fInstance.frontier_distance(
                        frontiers, positions, map
                    )
                    cost_matrix = distances

                elif chosen_method_id == 1:
                    visibility = fInstance.rank_visibility(frontiers)
                    distances = (
                        fInstance.frontier_distance(
                            frontiers, positions, map
                        ) * 3
                    )
                    rank_matrix_norm = fInstance.rank_matrix_norm(
                        distances, frontiers, positions, map
                    )
                    cost_matrix = distances
                    cost_matrix = cost_matrix + visibility
                    cost_matrix = cost_matrix + rank_matrix_norm

                elif chosen_method_id == 2:
                    ranks = fInstance.rank_matrix(frontiers, positions, map)
                    cost_matrix = ranks

                elif chosen_method_id == 3:
                    visibility = fInstance.frontier_visibility_modifier(
                        frontiers
                    )
                    distances = fInstance.frontier_distance(
                        frontiers, positions, map
                    )
                    alpha_beta = fInstance.alpha_beta_dist(
                        frontiers, positions, map
                    )
                    spread = fInstance.robot_spread(
                        distances, frontiers, positions, map
                    )
                    cost_matrix = distances
                    cost_matrix = cost_matrix + visibility
                    cost_matrix = cost_matrix - (1 - spread)

                elif chosen_method_id == 5:
                    distances = fInstance.frontier_distance(
                        frontiers, positions, map
                    )
                    spread = fInstance.robot_spread(
                        distances, frontiers, positions, map
                    )
                    cost_matrix = spread

                elif chosen_method_id == 6:
                    visibility = fInstance.rank_visibility(frontiers)
                    distances = (
                        fInstance.frontier_distance(
                            frontiers, positions, map
                        ) * 2
                    )
                    rank_matrix_norm = (
                        fInstance.rank_matrix_norm(
                            distances, frontiers, positions, map
                        ) * 2
                    )
                    cost_matrix = distances
                    cost_matrix = cost_matrix + visibility
                    cost_matrix = cost_matrix + rank_matrix_norm

                elif chosen_method_id == 7:
                    visibility = fInstance.rank_visibility(frontiers)
                    rank_distance = fInstance.frontier_distance(
                        frontiers, positions, map, "euclid"
                    )
                    cost_matrix = rank_distance
                    cost_matrix = cost_matrix + visibility

                elif chosen_method_id == 8:
                    visibility = fInstance.rank_visibility(frontiers)
                    distances = fInstance.frontier_distance(
                        frontiers, positions, map, "euclid"
                    )
                    rank_matrix_norm = fInstance.rank_matrix_norm(
                        distances, frontiers, positions, map
                    )
                    cost_matrix = distances
                    cost_matrix = cost_matrix + visibility
                    cost_matrix = cost_matrix + rank_matrix_norm

                elif chosen_method_id == 9:
                    ranks = fInstance.rank_matrix(
                        frontiers, positions, map, "euclid"
                    )
                    cost_matrix = ranks

                else:
                    visibility = fInstance.rank_visibility(frontiers)
                    distances = fInstance.frontier_distance(
                        frontiers, positions, map
                    )
                    rank_matrix_norm = fInstance.rank_matrix_norm(
                        distances, frontiers, positions, map
                    )
                    cost_matrix = distances
                    cost_matrix = cost_matrix + visibility
                    cost_matrix = cost_matrix + rank_matrix_norm

                cost_matrix = np.transpose(cost_matrix)
                row_ind, col_ind = linear_sum_assignment(cost_matrix)

                last_valid = j
                topic = "/robot" + str(j) + "/move_base"
                temp_frontiers = frontiers.frontiers
                if len(temp_frontiers) <= num_robots or \
                        len(col_ind) <= num_robots:
                    if j >= len(temp_frontiers):
                        try:
                            new_assign = np.argmin(cost_matrix[i, :])
                            rospy.logwarn("argmin")
                        except:
                            if len(temp_frontiers) != 0:
                                new_assign = len(temp_frontiers) - 1
                                rospy.logwarn("other")
                            else:
                                rospy.logerr(
                                    "Planning with empty frontiers")
                                break
                        temp_assignment = temp_frontiers[new_assign]
                        goal_location = temp_assignment.centroid
                    else:
                        l_test = col_ind[i]
                        temp_assignment = temp_frontiers[l_test]
                        goal_location = temp_assignment.centroid
                else:
                    l_test = col_ind[i]
                    temp_assignment = temp_frontiers[l_test]
                    goal_location = temp_assignment.centroid

                goals = fInstance.goals

                if (
                    fInstance.last_search_time[i]
                    + rospy.Duration(secs=2) < rospy.Time.now()
                ):
                    if goal_location != goals[i]:
                        fInstance.goals[i] = goal_location
                        fInstance.movebase_client(
                            topic=topic, number=i, position=goal_location
                        )
                        marker = fInstance.robot_marker
                        marker.header.stamp = rospy.Time.now()
                        marker.ns = "beep"
                        id += 1
                        marker.id = id
                        marker.pose.position = positions[i]
                        if i == 0:
                            marker.color.r = 0
                            marker.color.g = 0
                            marker.color.b = 0
                        elif i == 1:
                            marker.color.r = 1
                            marker.color.g = 1
                            marker.color.b = 1
                        elif i == 2:
                            marker.color.r = 0
                            marker.color.g = 1
                            marker.color.b = 1
                        elif i == 3:
                            marker.color.r = 1
                            marker.color.g = 0
                            marker.color.b = 1
                        elif i == 4:
                            marker.color.r = 1
                            marker.color.g = 1
                            marker.color.b = 0
                        else:
                            marker.color.r = 0
                            marker.color.g = 0
                            marker.color.b = 1
                        marker.lifetime = rospy.Duration(5)

                        marker_pub.publish(marker)

                        fInstance.increment_frontiers(i)
                elif (
                    fInstance.last_search_time[i] + rospy.Duration(secs=30)
                    < rospy.Time.now()
                ):
                    rospy.logwarn(
                        f"{goal_location} has been put on the blacklist"
                    )
                    fInstance.blacklist = np.append(
                        fInstance.blacklist, goal_location
                    )
                    rospy.logwarn(fInstance.blacklist)

        else:
            if fInstance.frontiers:
                rospy.logwarn("frontiers is empty")
            if not np.all(fInstance.robot_position):
                rospy.logwarn("positions are empty")
            else:
                fInstance.position_call_tf()
                i = robot_number - 1
                robot_location = copy.deepcopy(fInstance.robot_position[i])
                goal_location = Point()
                goal_location.x = robot_location.x + 0.5
                goal_location.y = robot_location.y + 0.5
                topic = "/robot" + str(robot_number) + "/move_base"
                fInstance.movebase_client(
                    topic=topic, number=i, position=goal_location
                )

        rate.sleep()

        time_estimate += time_increment
