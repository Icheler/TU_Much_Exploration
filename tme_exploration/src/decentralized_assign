#!/usr/bin/env python3

from cmath import inf
import numpy as np
import rospy
import re
import actionlib
import tf
import os
import atexit
import random
import time
import math
import copy

from skimage import graph
from scipy.optimize import linear_sum_assignment
from datetime import datetime

from tme_exploration.msg import frontier, frontierArray
from geometry_msgs.msg import Point, Pose, PoseWithCovarianceStamped
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from sensor_msgs.msg import LaserScan
from visualization_msgs.msg import Marker, MarkerArray
from actionlib_msgs.msg import GoalStatusArray
from nav_msgs.msg import OccupancyGrid


class frontierAssign:
    def __init__(self):
        self.date_string = datetime.now().strftime("%Y-%m-%d|%H:%M:%S")
        self.frontiers = []
        self.distances = []
        self.numberRobots = rospy.get_param('~number_of_robots')
        self.robotPrefix = rospy.get_param('~robot_ns')
        self.robotPosition = np.empty(self.numberRobots, dtype=Point)
        self.robotSpeeds = np.empty(self.numberRobots)
        self.maxSpeed = None
        self.speedModifier = np.empty(self.numberRobots)
        self.visibilityModifier = np.empty(self.numberRobots)
        self.frontierVisibilityModifier = None
        self.frontierDistanceModifier = None
        self.assign_robot_speed()
        self.speed_modifier()
        self.visibility_params()
        self.lastSearchTime = np.empty(self.numberRobots, dtype=rospy.Time)
        self.goals = np.empty(self.numberRobots, dtype=Point)
        self.publisher_position = []
        self.robotMarker = Marker()
        self.searchNow = False
        self.lastPos = np.empty(self.numberRobots, dtype=Point)
        self.travelDistances = []
        self.travelDistancesTotal = np.zeros(self.numberRobots)
        self.chosenMethod = rospy.get_param('~frontier_method')
        self.goalStatus = np.empty(self.numberRobots)
        self.subStatus = []
        self.blacklist = []
        self.explored_frontiers = np.empty(self.numberRobots)
        self.map_name = os.environ['tme_ROBOT_ENV']
        self.map = None
        self.clean_area = self.get_clean_area(25)

        atexit.register(self.exit_handler)

        for i in range(self.numberRobots):
            self.lastSearchTime[i] = rospy.Time.now() - rospy.Duration(5)
            j = i+1
            topic = '/' + self.robotPrefix + str(j) + '/point_relay'
            self.publisher_position.append(rospy.Publisher(topic, Point, queue_size=10))

            topic = '/' + self.robotPrefix + str(j) + '/move_base/status'
            self.subStatus.append(rospy.Subscriber(topic, GoalStatusArray, queue_size=10, callback_args = topic))

        self.robotMarker.header.frame_id = "map"
        #self.robotMarker.header.stamp    = rospy.get_rostime()
        #self.robotMarker.ns = "robot"
        self.robotMarker.id = 0
        self.robotMarker.type = 2 # sphere
        self.robotMarker.action = 0
        #self.robotMarker.pose.position = self.state.point
        self.robotMarker.pose.orientation.x = 0
        self.robotMarker.pose.orientation.y = 0
        self.robotMarker.pose.orientation.z = 0
        self.robotMarker.pose.orientation.w = 1.0
        self.robotMarker.scale.x = 1.0
        self.robotMarker.scale.y = 1.0
        self.robotMarker.scale.z = 1.0

        #self.robotMarker.color.r = 0.0
        #self.robotMarker.color.g = 1.0
        #self.robotMarker.color.b = 0.0
        self.robotMarker.color.a = 1.0

    def exit_handler(self):
        travelDistances = self.travelDistances

        date_string = self.date_string

        file_location = 'catkin_ws/src/TU_Much_Exploration/tme_data/distances/' + str(self.numberRobots)
        file_name = str(self.map_name) + str("_") + str(self.chosenMethod) + str("_") + date_string + ".txt"
        file_name = os.path.join(os.path.expanduser('~'),file_location, file_name)

        a_file = open(file_name, 'w+')
        np.savetxt(a_file, travelDistances)

        a_file.close()

        rospy.logwarn('created file named: ' + file_name)

    # Getters for various parameters

    def set_goals(self, number, value):
        self.goals[number] = value

    def increment_frontiers(self, number):
        self.explored_frontiers[number] += 1

    # Callbacks for the frontiers and position data from the ros topics

    def callback_frontiers(self, data):
        self.frontiers = data

    def callback_position(self, data, topic):
        rospy.logerr(f'this is being called for {topic}')
        number = (int)((re.search(r'\d+', topic)).group(0)) - 1
        robot_location = data.pose.pose.position
        try:
            tf_topic = '/robot' + str(number+1) + '/map'
            (trans, rot) = listener.lookupTransform('/map', tf_topic, rospy.Time(0))

            robot_location.x = robot_location.x + trans[0]
            robot_location.y = robot_location.y + trans[1]
        except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
            rospy.logerr(f'TF error for {tf_topic}')
        self.robotPosition[number] = robot_location

    def callback_status(self, data, topic):
        number = (int)((re.search(r'\d+', topic)).group(0)) - 1
        status_list = data.status_list

        for i in range(len(status_list)):
            if(status_list[i].status == 4):
                np.append(self.blacklist, self.goals[number])

    def callback_map(self, data):
        self.map = np.asarray(data.data, dtype=np.int8).reshape(data.info.height, data.info.width)
        self.map_res = data.info.resolution
        self.map_origin = [data.info.origin.position.x, data.info.origin.position.y]
        self.map_middle = int(data.info.height / 2)

    def position_call_tf(self):
        for i in range(self.numberRobots):
            j = i+1
            try:
                tf_topic = f'/robot{j}/map'
                (trans, rot) = listener.lookupTransform(tf_topic, f'/robot{j}/base_link', rospy.Time(0))
                robot_location = Point(x=trans[0], y=trans[1])
                self.robotPosition[i] = robot_location
            except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException) as e:
                rospy.logerr(f'TF error for {tf_topic} with message {e}')

        return self.robotPosition

    def blacklist_check(self, frontiers):
        foundSth = 0
        localFrontiers = frontiers
        if(len(localFrontiers.frontiers) == 0):
            for i in range(len(localFrontiers.frontiers)):
                foundSth = 0
                x = i - foundSth
                for j in range(len(self.blacklist)):
                    if (localFrontiers.frontiers[x].centroid == self.blacklist[j]):
                        foundSth += 1
                        localFrontiers.frontiers.pop(x)
        return localFrontiers

    def distance_tracker(self, time_estimate):
        temp_array = [time_estimate]
        not_first = True
        for i in range(self.numberRobots):
            if(self.lastPos[i]):
                self.travelDistancesTotal[i] += self.euclid_distance(self.lastPos[i], self.robotPosition[i])
                temp_array.append(self.travelDistancesTotal[i])
                self.lastPos[i] = self.robotPosition[i]
            else:
                not_first = True
                self.lastPos[i] = self.robotPosition[i]
                temp_array.append(0)
        for i in range(self.numberRobots):
            if(not_first):
                temp_array.append(self.explored_frontiers[i])
            else:
                temp_array.append(0)

        self.travelDistances.append(temp_array)

    # Get euclidean distance between two points
    def euclid_distance(self, a: Point, b: Point):
        testa = np.square(a.x - b.x)
        testb = np.square(a.y - b.y)
        testc = testa + testb
        result = np.sqrt(testc)
        return result

    # Instanciate the self.distances matrix with the distance for every robot to every frontier
    def frontier_distance(self, frontiers, positions, map, estimate='xyz'):
        local_frontiers = frontiers
        l_positions = positions
        r_distances = np.empty((len(local_frontiers.frontiers), 1))
        if estimate == 'euclid':
            for i in range(len(local_frontiers.frontiers)):
                for j in range(len(l_positions)):
                    try:
                        r_distances[i][j] = self.euclid_distance(local_frontiers.frontiers[i].centroid, l_positions[j])
                    except: 
                        r_distances[i][j] = 50
        else:
            r_distances = self.wavefront_robot_to_frontier(frontiers, positions, map)
            r_distances = np.where(np.isinf(r_distances), 2000, r_distances)
        r_distances = r_distances / np.max(r_distances)
        return r_distances


    # Get speed for every robot from ros parameters and assign maxSpeed
    def assign_robot_speed(self):
        for i in range(0, self.numberRobots):
            temp_str = '/' + self.robotPrefix + str(i+1) + '/max_velocity'
            self.robotSpeeds[i] = 1#rospy.get_param(temp_str)
        self.maxSpeed = np.max(self.robotSpeeds)

    # Assign speed modifiers for every robot by normalizing the values to 0,1 through dividing with the maxSpeed
    def speed_modifier(self):
        self.speedModifier = np.empty(self.numberRobots)
        for i in range(self.numberRobots):
            self.speedModifier[i] = self.robotSpeeds[i]/self.maxSpeed
        
    # Find angle and range of every robot, multiply them and normalize for all values
    def visibility_params(self):
        self.visibilityModifier = np.zeros(self.numberRobots)
        for i in range(self.numberRobots):
            topic = '/' + self.robotPrefix + str(self.numberRobots) + '/scan'
            data = rospy.wait_for_message(topic, LaserScan)
            overall_angle = data.angle_max - data.angle_min
            overall_range = data.range_max - data.range_min
            self.visibilityModifier[i] = overall_angle * overall_range
        maximum = np.max(self.visibilityModifier)
        self.visiblityModifier = self.visibilityModifier / maximum
    
    # Computes the modifier from robot speed and distance between robot and frontiers, Normalize again
    def frontier_distance_modifier(self, frontiers, distances):
        result = np.ones((len(frontiers.frontiers), self.numberRobots))
        try:
            for i in range(len(frontiers.frontiers)):
                for j in range(self.numberRobots):
                    result[i][j] = self.speedModifier[j] * distances[i][j]
            result = result / np.max(result)
        except ValueError:
            pass
        return result

    # Computes the modifier from robot visibility and size of frontiers, Normalize again
    def frontier_visibility_modifier(self, frontiers):
        result = np.ones((len(frontiers.frontiers), self.numberRobots))
        try:
            for i in range(len(frontiers.frontiers)):
                for j in range(self.numberRobots):
                    result[i][j] = self.visibilityModifier[j] * frontiers.frontiers[i].size
            result = result / np.max(result)
            result = 1 - result

        except ValueError:
            pass
        return result

    def active_cb(self):
        rospy.loginfo("Goal pose is now being processed by the Action Server...")

    def feedback_cb(self, feedback):
        rospy.loginfo("Feedback for goal pose received")

    def done_cb(self, status, result):
    # Reference for terminal status values: http://docs.ros.org/diamondback/api/actcombinedionlib_msgs/html/msg/GoalStatus.html
        rospy.logwarn("move_base exited with status: " + str(status))
        
        if status == 2:
            rospy.loginfo("Goal pose received a cancel request after it started executing, completed execution!")

        if status == 3:
            rospy.loginfo("Goal pose reached")

        if status == 4:
            rospy.loginfo("Goal pose was aborted by the Action Server")
            return

        if status == 5:
            rospy.loginfo("Goal pose has been rejected by the Action Server")
            return

        if status == 8:
            rospy.loginfo("Goal pose received a cancel request before it started executing, successfully cancelled!")

    # Method to allow the parsing of move_base actions 
    def movebase_client(self, topic, number, position, orientation=[0,0,0,1], delete=False):

        client = actionlib.SimpleActionClient(topic, MoveBaseAction)

        client.wait_for_server()

        goal = MoveBaseGoal()
        goal.target_pose.header.frame_id = 'map'
        goal.target_pose.header.stamp = rospy.Time.now()
        goal.target_pose.pose.position.x = position.x
        goal.target_pose.pose.position.y = position.y
        goal.target_pose.pose.position.z = 0
        goal.target_pose.pose.orientation.x = orientation[0]
        goal.target_pose.pose.orientation.y = orientation[1]
        goal.target_pose.pose.orientation.z = orientation[2]
        goal.target_pose.pose.orientation.w = orientation[3]

        self.lastSearchTime[number] = rospy.Time.now()

        client.send_goal(goal, self.done_cb, self.active_cb, self.feedback_cb)

    def movebase_spoof(self, number, position):
        self.lastSearchTime = rospy.Time.now()
        self.publisher_position[number].publish(position)

    def get_clean_area(self, number):
        size = number*2+1
        result = []
        for i in range(size):
            x = i - number
            for j in range(size):
                y = j - number
                result.append([x, y])
        return result   

    def clean_neighbors(self, array, indices, clean_area):
        result = array
        shapes = result.shape
        for x,y in indices:
            if x < shapes[0] and y < shapes[1] and x > -1 and y > -1:
                result[x][y] = 1
            for dx, dy in clean_area:
                x_test = x+dx
                y_test = y+dy
                if x_test < shapes[0] and y_test < shapes[1] and x_test > -1 and y_test > -1:
                    result[x+dx][y+dy] = 1
        return result

    def point_to_matrix(self, point):
        try:
            if point.size != 0:
                rospy.logwarn(point)
                return point
        except:
            return [point.x, point.y]

    def centroid_to_matrix(self, centroid):
        try:
            if type(centroid).__module__ == np.__name__:
                rospy.logwarn(centroid)
                return centroid
            else:
                return [centroid.centroid.x, centroid.centroid.y]
        except:
            return [centroid.centroid.x, centroid.centroid.y]

    def point_to_map_matrix(self, point_array):
        result = np.empty_like(point_array, dtype = int)
        result[0] = round((point_array[0] - self.map_origin[0]) / self.map_res)
        result[1] = round((point_array[1] - self.map_origin[1]) / self.map_res)
        return result

    def map_to_point_matrix(self, point_array):
        result = np.empty_like(point_array, dtype=float)
        result[0] = point_array[0] * self.map_res + self.map_origin[0]        
        result[1] = point_array[1] * self.map_res + self.map_origin[1]
        return result

    def wavefront_robot_to_frontier(self, frontiers, positions, maps):
        robots = copy.deepcopy(positions)
        robot_len = 1
        goals = copy.deepcopy(frontiers.frontiers)
        goals_len = len(goals)
        map = copy.deepcopy(maps)
        map = np.where(map > 99, -1, map)
        map = np.where(map == 0, 1, map)
        temp = self.point_to_matrix(robots)
        robots = self.point_to_map_matrix(temp)
        for i in range(goals_len):
            temp = self.centroid_to_matrix(goals[i])
            goals[i] = self.point_to_map_matrix(temp)
        map = self.clean_neighbors(map, [robots], self.clean_area)
        map = self.clean_neighbors(map, goals, self.clean_area)
        l_graph = graph.MCP(costs=map, fully_connected=False)
        frontierDistances = np.ones((goals_len, self.numberRobots))
        for i in range(robot_len):
            cost_array, tracebacks_array = l_graph.find_costs([robots], goals, find_all_ends=True)
            for j in range(len(goals)):
                temp = goals[j]
                testing = cost_array[temp[0]][temp[1]]
                frontierDistances[j][i] = self.speedModifier[i] * testing
        return frontierDistances

    # minPos approximation by assigning rank based on distance between goal and robot locations
    # this is done from frontiers perspective
    def rank_matrix(self, frontiers, positions, map):
        frontier_distance = self.frontier_distance(frontiers, positions, map)
        order = np.argsort(frontier_distance, axis=1)
        ranks = np.argsort(order, axis=1)
        return ranks + 0.01 * frontier_distance

    def rank_matrix_norm(self, frontiers, positions, map):
        frontier_distance = self.frontier_distance(frontiers, positions, map)
        order = np.argsort(frontier_distance, axis=1)
        ranks = np.argsort(order, axis=1)
        maximum = np.max(ranks)
        if maximum != 0 and maximum:
            result = ranks / maximum
        else:
            result = ranks
        return result

    def rank_distance(self, frontiers, positions, map):
        frontier_distance = self.frontier_distance(frontiers, positions, map)
        order = np.argsort(frontier_distance, axis=0)
        ranks = np.argsort(order, axis=0)
        maximum = np.max(ranks)
        if maximum != 0 and maximum:
            result = ranks / maximum
        else:
            result = ranks
        return result

    def rank_visibility(self, frontiers):
        frontier_vis = self.frontier_visibility_modifier(frontiers)
        order = np.argsort(frontier_vis, axis = 0)
        ranks = np.argsort(order, axis = 0)
        maximum = np.max(ranks)
        if maximum:
            result = ranks / maximum
        else:
            result = ranks
        return result

if __name__ == '__main__':
    
    rospy.init_node('frontier_assign')

    param_rate = rospy.get_param('~frontier_rate', 5)

    relative_name = rospy.get_name()
    robot_number = int(list(filter(str.isdigit, relative_name))[0])

    data = rospy.wait_for_message('tme_frontier_search/frontierArray', frontierArray)

    fInstance = frontierAssign()

    listener = tf.TransformListener()

    markerPub = rospy.Publisher('robotMarker', Marker, queue_size=10)
    
    # one of: nearest, greedy, combined, minPos
    chosen_method = rospy.get_param('~frontier_method')
    rospy.logwarn("Method is set to find {} goal".format(chosen_method))
    fInstance.chosenMethod = chosen_method

    rospy.Subscriber("tme_frontier_search/frontierArray", frontierArray, fInstance.callback_frontiers)
    subscriber_position = []

    rospy.Subscriber('new_map', OccupancyGrid, fInstance.callback_map)

    chosen_method_id = 0

    if(chosen_method == 'nearest'):
        chosen_method_id = 0
    elif(chosen_method == 'greedy'):
        chosen_method_id = 1
    elif(chosen_method == 'minPos'):
        chosen_method_id = 2
    elif(chosen_method == 'combined'):
        chosen_method_id = 3
        visibility_weighting = rospy.get_param('~visibility_weighting', 1)
        speed_weighting = rospy.get_param('~speed_weighting', 1)
    else:
        chosen_method_id = 4
        visibility_weighting = rospy.get_param('~visibility_weighting', 1)
        speed_weighting = rospy.get_param('~speed_weighting', 1)

    rate = rospy.Rate(param_rate)
    id = 0

    time_estimate = 0
    time_increment = 1
    
    while not rospy.is_shutdown():

        cost_matrix = None
        fInstance.position_call_tf()
        
        if(fInstance.frontiers and np.all(fInstance.robotPosition)):
            frontiers = copy.deepcopy(fInstance.frontiers)
            frontiers = fInstance.blacklist_check(frontiers)
            positions = copy.deepcopy(fInstance.robotPosition)
            map = copy.deepcopy(fInstance.map)
            distances = None
            visibility = None
            distance_method = 'xyz'
            num_robots = copy.deepcopy(fInstance.numberRobots)

            j = robot_number
            i = j - 1
            
            if(chosen_method_id == 0):
                distances = fInstance.frontier_distance(frontiers, positions[i], map)
                cost_matrix = distances
            
            elif(chosen_method_id == 1):
                visibility = fInstance.frontier_visibility_modifier(frontiers)
                cost_matrix = visibility
            
            elif(chosen_method_id == 2):
                ranks = fInstance.rank_matrix(frontiers, positions[i], map)
                distances = fInstance.frontier_distance(frontiers, positions[i], map)
                cost_matrix = ranks + 0.00001 * distances

            elif(chosen_method_id == 3):
                visibility = fInstance.frontier_visibility_modifier(frontiers)
                distances = fInstance.frontier_distance(frontiers, positions[i], map)
                cost_matrix = distances
                cost_matrix = cost_matrix + visibility

            else:
                visibility = fInstance.frontier_visibility_modifier(frontiers)
                rank_distance = fInstance.rank_distance(frontiers, positions[i], map)
                rank_matrix_norm = fInstance.rank_matrix_norm(frontiers, positions[i], map)
                cost_matrix = rank_distance
                cost_matrix = cost_matrix + visibility
                cost_matrix = cost_matrix + rank_matrix_norm

            cost_matrix = np.transpose(cost_matrix)
            row_ind, col_ind = linear_sum_assignment(cost_matrix)
            
            last_valid = j
            topic = '/robot' + str(j) + '/move_base'
            temp_frontiers = frontiers.frontiers

            rospy.logerr(col_ind)
            temp_assignment = temp_frontiers[col_ind[0]]
            goal_location = temp_assignment.centroid

            goals = fInstance.goals

            if(fInstance.lastSearchTime[i] + rospy.Duration(secs=5) < rospy.Time.now()):
                if(goal_location != goals[i]):
                    fInstance.set_goals(i, goal_location)
                    fInstance.movebase_client(topic=topic, number=i, position=goal_location)
                    marker = fInstance.robotMarker
                    marker.header.stamp = rospy.Time.now()
                    marker.ns = 'beep'
                    id += 1
                    marker.id = id
                    marker.pose.position = goal_location
                    if i == 0:
                        marker.color.r = 0
                        marker.color.g = 0
                        marker.color.b = 0
                    elif i == 1:
                        marker.color.r = 1
                        marker.color.g = 1
                        marker.color.b = 1
                    elif i == 2:
                        marker.color.r = 0
                        marker.color.g = 1
                        marker.color.b = 1
                    elif i == 3:
                        marker.color.r = 1
                        marker.color.g = 0
                        marker.color.b = 1
                    elif i == 4:
                        marker.color.r = 1
                        marker.color.g = 1
                        marker.color.b = 0
                    else:
                        marker.color.r = 0
                        marker.color.g = 0
                        marker.color.b = 1
                    marker.lifetime = rospy.Duration(5)

                    markerPub.publish(marker)

                    #fInstance.movebase_spoof(number=i, position=goal_location)
                    fInstance.increment_frontiers(i)
                elif(fInstance.lastSearchTime[i] + rospy.Duration(secs=10)< rospy.Time.now()):
                    goal_location.x += random.uniform(-0.5, 0.5)
                    goal_location.y += random.uniform(-0.5, 0.5)
                    fInstance.set_goals(i, goal_location)
                    fInstance.movebase_client(topic=topic, number=i, position=goal_location, delete=True)
                    marker = fInstance.robotMarker
                    marker.header.stamp = rospy.Time.now()
                    marker.ns = 'beep'
                    id += 1
                    marker.id = id
                    marker.pose.position = goal_location
                    if i == 0:
                        marker.color.r = 0
                        marker.color.g = 0
                        marker.color.b = 0
                    elif i == 1:
                        marker.color.r = 1
                        marker.color.g = 1
                        marker.color.b = 1
                    elif i == 2:
                        marker.color.r = 0
                        marker.color.g = 1
                        marker.color.b = 1
                    elif i == 3:
                        marker.color.r = 1
                        marker.color.g = 0
                        marker.color.b = 1
                    elif i == 4:
                        marker.color.r = 1
                        marker.color.g = 1
                        marker.color.b = 0
                    else:
                        marker.color.r = 0
                        marker.color.g = 0
                        marker.color.b = 1
                    marker.lifetime = rospy.Duration(20)

                    markerPub.publish(marker)

                    #fInstance.movebase_spoof(number=i, position=goal_location)

        else:
            if fInstance.frontiers:
                rospy.logwarn("frontiers is empty")
            if not np.all(fInstance.robotPosition):
                rospy.logwarn('positions are empty')

        rate.sleep()

        if(time_estimate % 25 == 0 or time_estimate == 0):
            time_estimate = int(time_estimate)
            temp_estimate = int(time_estimate / 5)
            #fInstance.distance_tracker(temp_estimate)

        time_estimate += time_increment



