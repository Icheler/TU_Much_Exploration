#!/usr/bin/env python3

import rospy
import numpy as np
import os
import atexit

from datetime import datetime

from nav_msgs.msg import OccupancyGrid

class mapCompare:
    def __init__(self, mode):
        self.date_string = datetime.now().strftime("%Y-%m-%d-%H:%M:%S")
        atexit.register(self.exit_handler)
        self.map = None
        self.mode = mode
        self.differenceArray = []
        self.stopTime = int(rospy.get_param('~stop_time', '400'))
        self.map_name = os.environ['tme_ROBOT_ENV']
        self.expl_method = os.environ['tme_expl_method']
        self.file_name = str(self.map_name) + '_' + str(self.expl_method) + '_' + self.date_string
        self.info = None

    def exit_handler(self):
        date_string = self.date_string

        file_name = str(self.map_name) + '_' + str(self.expl_method) + '_' + date_string + '.txt'
        file_location = 'catkin_ws/src/TU_Much_Exploration/tme_data/coverage/measurements/'  + str(num_robots)
        file_location = os.path.join(os.path.expanduser('~'), file_location)
        file_complete = os.path.join(os.path.expanduser('~'), file_location, file_name)

        if(not self.mode):
            a_file = open(file_complete, 'w+')
            np.savetxt(a_file, self.map)
            a_file.close()
            rospy.logwarn('created file named: ' + file_complete)
        else:
            a_file = open(file_complete, 'w+')
            np.savetxt(a_file, self.differenceArray)
            a_file.close()
            rospy.logwarn('created file named: ' + file_complete)
     
        #add image to verify validity

    def callback_map(self, data):
        self.map = data.data
        self.info = data.info

if __name__ == '__main__':

    rospy.init_node('map_compare')
    
    rate = rospy.Rate(0.2)

    #0 is log array, 1 is compare and log
    classy = mapCompare(mode=1)
    mode = classy.mode
    num_robots = os.environ['tme_start_num']
    reduce_size = 1000
    map_size = 1000

    if(mode):
        file_name = classy.file_name
        file_location = 'catkin_ws/src/TU_Much_Exploration/tme_data/coverage/measurements/' + str(num_robots)
        file_location = os.path.join(os.path.expanduser('~'), file_location)
        file_complete = os.path.join(os.path.expanduser('~'), file_location, file_name)
    
        map_file_name = classy.map_name + '.txt'
        map_file_location = 'catkin_ws/src/TU_Much_Exploration/tme_data/coverage/base_line'
        base_file = os.path.join(os.path.expanduser('~'), map_file_location, map_file_name)
        baseLine = np.loadtxt(base_file, ndmin=2)

        try:
            baseLine = baseLine.reshape(map_size, -1)
        except:
            baseLine = baseLine.reshape(1002, -1)
            map_size = 1002

        while(np.size(baseLine, 1) > map_size):
            baseLine = np.delete(baseLine, (0), axis=1)
        while(np.size(baseLine, 0) > map_size):
            baseLine = np.delete(baseLine, (0), axis=0)

        base_difference = np.full(baseLine.shape, -1)

        base_metric = np.mean(baseLine != base_difference)

        while(np.size(baseLine, 1) > reduce_size):
            baseLine = np.delete(baseLine, (0), axis=1)
        while(np.size(baseLine, 0) > reduce_size):
            baseLine = np.delete(baseLine, (0), axis=0)

    rospy.Subscriber('/map', OccupancyGrid, callback=classy.callback_map)

    time_estimate = 0

    stopTime = classy.stopTime
    temp_difference = 0

   

    while not rospy.is_shutdown():

        if(mode):
            os.system('rosrun map_server map_saver -f ' + str(file_complete))
            local_info = classy.info
            rospy.logwarn(f'{local_info.width} and height {local_info.height}')
            localMap = np.array(classy.map).reshape(local_info.height, local_info.width)
            while(np.size(localMap, 1) > reduce_size):
                localMap = np.delete(localMap, (0), axis=1)
            while(np.size(localMap, 0) > reduce_size):
                localMap = np.delete(localMap, (0), axis=0)

            difference = np.mean(baseLine != localMap)

            temp_difference = (base_metric - difference) / base_metric

            localArray = classy.differenceArray
            temp_time = time_estimate
            test = [temp_time, temp_difference]
            time_estimate += 5
            localArray.append(test)
            rospy.logerr('Current coverage is :' + str(temp_difference))
            rospy.logerr('Current coverage is :' + str(temp_difference))
            rospy.logerr('Current coverage is :' + str(temp_difference))
            rospy.logerr('Current coverage is :' + str(temp_difference))
            rospy.logerr('Current coverage is :' + str(temp_difference))

            if(time_estimate >= stopTime):
                os.system('rosnode kill -a')

            if(temp_difference > 0.93):
                os.system('rosnode kill -a')

        rate.sleep()